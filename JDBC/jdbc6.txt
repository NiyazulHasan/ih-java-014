ResultSetMetaData
==================
ResultSetMetaData is an interface which is present in java.sql package.

ResultSetMetaData provides metadata of a table.

ResultSetMetaData gives information about number of columns, type of columns,size of columns and etc.

We can create ResultSetMetaData object by using getMetaData() of ResultSet object.
ex:
	ResultSetMetaData rsmd=rs.getMetaData();

ex:

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

public class RSMDApp 
{
	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		ResultSetMetaData rsmd=rs.getMetaData();
		
		System.out.println(rsmd.getColumnCount());//3
		System.out.println(rsmd.getColumnTypeName(2));//VARCHAR2
		System.out.println(rsmd.getColumnName(2));//SNAME
		System.out.println(rsmd.getColumnDisplaySize(2));//10
		
		rs.close();
		st.close();
		con.close();
	
	}
}

JDBC Flexible Application
==========================
In JDBC, Connection object is a heavy weight object.

It is never recommanded to create Connection object in every JDBC application because it will increase the burdun of an application over the network.

It is always recommanded to a seperate class which returns Connection object.

ex:


DBConnection.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	private static Connection con=null;
	
	//private constructor
	private DBConnection()
	{
		
	}
	
	public static Connection getConnection()
	{
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}

FlexibleApp.java
----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception 
	{
		Connection con=DBConnection.getConnection();
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}

Working with Properties file
==============================
In regular intervals, Our DBA will change username and password for security reason. 

It is never recommanded to pass database properties directly to jdbc application.

It is always recommanded to read the database properties from properties file.

A properties file contains key and value pair.

dbdetails.properties
---------------------
driver=oracle.jdbc.driver.OracleDriver
url=jdbc:oracle:thin:@localhost:1521:XE
username=system
password=admin 

PropertiesFileApp.java
----------------------
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp {

	public static void main(String[] args)throws Exception 
	{
		//local a properties file
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");

		//Create a Properties class object
		Properties p=new Properties();
		
		//load the data from properties file to properties class.
		p.load(fis);
		
		//read the data from properties class
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		Statement st=con.createStatement();
		ResultSet rs=st.executeQuery("select * from student");
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}

}

Thin-Client/Fat-Server Application
===================================
Every JDBC application is a thin-client/fat-server application.

To create a thin-client/fat-server application we need to save our business logic and persistence logic in a database software in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.

Diagram: jdbc6.1

PL/SQL procedure
-----------------
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
IS
BEGIN
C:=A+B;
END;
/

CallableStmtApp.java
---------------------
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp {

	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register OUT parameters
		cst.registerOutParameter(3,Types.INTEGER);
		
		//set the values to IN parameters
		cst.setInt(1, 10);
		cst.setInt(2, 20);
		
		//execute
		cst.execute();
		
		//gather the result
		int result=cst.getInt(3);
		System.out.println("sum of two numbers is ="+result);
		
		cst.close();
		con.close();
	}

}





























































