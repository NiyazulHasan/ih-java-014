Working with date values
============================
While dealing with DOB,DOA,DOR,DOD and etc we need to insert and retrieve date values.

Every database software support different date patterns.
ex:
	Oracle	---	dd-MMM-YY
	MySQL	---	yyyy-MM-dd 

It is never recommanded to save date value in the form of strings because we can't compare two dates.

java.util.Date class is not suitable to perform database operation.

java.sql.Date class is suitable to perform database operation.

Simple Statement object does not allow to add date values to query parameter.

PreparedStatement object allows to add date values to query parameters.

Once the value given to JDBC driver, It will insert date value in the pattern which is supported by underlying database software.


Standard procedure to insert Date value
========================================

Diagram: jdbc5.1

1) Enduser will give date value in the form string.

2) A parse() method of SimpleDateFormat class converts String date to java.util.Date
   class object.

3) Our application converts java.util.Date class object to java.sql.Date class
   object.

4) ps.setDate(-,-) method is used to set the date value to query parameter.

5) JDBC driver will insert date value in the pattern which is supported by underlying 
   database software.


table
------
drop table emp1;

create table emp1(eid number(3),ename varchar2(10),edoj date);


DateInsertApp.java
-------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.Scanner;

public class DateInsertApp 
{
	public static void main(String[] args)throws Exception 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the employee id :");
		int id=sc.nextInt();
		System.out.println("Enter the employee name :");
		String name=sc.next();
		System.out.println("Enter the employee DOJ (dd-MM-yyyy) :");
		String sdoj=sc.next();
		
		//converting string date to util date
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		java.util.Date udoj=sdf.parse(sdoj);
		
		//converting util date to sql date 
		long ms=udoj.getTime();
		java.sql.Date sqldoj=new java.sql.Date(ms);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into emp1 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1,id);
		ps.setString(2,name);
		ps.setDate(3,sqldoj);
		
		//execute
		int result=ps.executeUpdate();
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
	}
	
}

DateRetrieveApp.java
-------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;

public class DateRetrieveApp  
{
	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry="select * from emp1";
		
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			int id=rs.getInt(1);
			String name=rs.getString(2);
			java.sql.Date sqldoj=rs.getDate(3);
			
			//converting sql date to util date
			java.util.Date udoj=(java.util.Date)sqldoj;
			
			//converting util date to string 
			SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
			String sdoj=sdf.format(udoj);
			
			System.out.println(id+" "+name+" "+sdoj);
		}
		rs.close();
		st.close();
		con.close();
	}
}


Working with LOB values
===========================
Files are known as LOB's.

We have two types of LOB's.

1)BLOB (Binary Large Object)
-----------------------
	ex:
		images,audio,video,avi file and etc.

2)CLOB (Character Large Object) 
--------------------------------
	ex:
		text file, advanced text file ,doc file and etc.

Simple Statement object does not allows to keep LOB values to query parameter.

A PreparedStatement object allows us to keep LOB values to query parameter.

To set the LOB value we need to use following methods.
ex:
	ps.setBinaryStream(-,-,-)/ps.setBLOB(-,-,-)
	ps.setCharacterStream(-,-,-)/ps.setCLOB(-,-,-);


table
------
drop table emp2;

create table emp2(eid number(3),ename varchar2(10), ephoto BLOB);


PhotoInsertApp.java
--------------------
package com.ihub.www;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PhotoInsertApp {

	public static void main(String[] args)throws Exception 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the employee id :");
		int id=sc.nextInt();
		System.out.println("Enter the employee name : ");
		String name=sc.next();
		
		//locate a file 
		File f=new File("src/com/ihub/www/rock.jpg");
		FileInputStream fis=new FileInputStream(f);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		String qry="insert into emp2 values(?,?,?)";
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1,id);
		ps.setString(2,name);
		ps.setBinaryStream(3,fis,(int)f.length());
		
		//execute
		int result=ps.executeUpdate();
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record inserted");
		
		ps.close();
		con.close();
	}

}

PhotoRetrieveApp.java
----------------------
package com.ihub.www;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class PhotoRetrieveApp {

	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from emp2";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			InputStream is=rs.getBinaryStream(3);
			FileOutputStream fos=new FileOutputStream("E:\\Latest\\rock.jpg");
			
			int byteReads=0;
			byte[] buff=new byte[499];
			
			while((byteReads=is.read(buff))!=-1)
			{
				fos.write(buff, 0, byteReads);
			}
			fos.close();
		}
		System.out.println("Please check the location");
		rs.close();
		st.close();
		con.close();
	}

}





































	























