Types of ResultSet objects
==========================
We have two types of ResultSet object.

1)Non-Scrollable ResultSet object

2)Scrollable ResultSet object 

1)Non-Scrollable ResultSet object
----------------------------------
Bydefault every ResultSet object is a non-scrollable ResultSet object.

A  ResultSet object which allows us to read the records sequentially, unidirectionally is called non-scrollable ResultSet object.

If JDBC Statement object is created without type , mode value then the ResultSet object is called non-scrollable ResultSet object.
ex:
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");
 

2)Scrollable ResultSet object 
----------------------------
A  ResultSet object which allows us to read the records non-sequentially, bi-directionally,randomly is called scrollable ResultSet object.

If JDBC Statement object is created with type , mode value then the ResultSet object is called scrollable ResultSet object.
ex:
	Statement st=con.createStatement(type_value,mode_value);
	ResultSet rs=st.executeQuery("select * from student");

Diagram: jdbc7.1

We have two type values.

1) ResultSet.TYPE_SCROLL_SENSITIVE
2) ResultSet.TYPE_SCROLL_INSENSITIVE

We have two mode values.

1) ResultSet.CONCUR_READ_ONLY
2) ResultSet.CONCUR_UPDATABLE

Various methods of scrollable ResultSet object
-----------------------------------------------------
next()
-------
	It will move the record pointer from current position to next position.

previous()
-----------
	IT will move the record pointer from current position to previous position.

getXxx()
-------
	It is used to read the data from record ResultSet.

getRow()
---------
	It will return the position of record pointer.

close()
-------
	It is used to close the ResultSet object.

first()
---------
	It is used to set the record pointer to first record.

isFirst()
--------
	It is used to check record pointer is in first record or not.

last()
------
	It is used to set the record pointer to last record.

isLast()
-------
	It is used to check record pointer is in last record or not.

beforeFirst()
-----------
	It will keep the record pointer to BFR position.

afterLast()
------------
	It will keep the record pointer to ALR position.

relative(+/-)
----------
	It will move the record pointer based on the current position.

absolute(+/-)
-----------
	It will move the record pointer based on the BFR and ALR position.


ex:
-----
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableRSApp {

	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");

		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
										ResultSet.CONCUR_READ_ONLY);
		
		ResultSet rs=st.executeQuery("select * from student");
		
		//top to bottom
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.afterLast();
		//top to bottom
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.isFirst());//true 
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.last();
		System.out.println(rs.isLast());//true
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		//rs.relative(-2);
		//System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		
		rs.close();
		st.close();
		con.close();
	}

}

Batch Processing
==================
A batch processing allows us to write multiple querys to batch and it makes a single call to database.

In batch processing we need to add each query to batch by using addBatch() method of Statement object.
ex:
	st.addBath("select * from student");

To execute the batch we need to use executeBatch() method of Statement object which returns int array of result.
ex:
	int[] result=st.executeBatch();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp {

	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry1="insert into student values(104,'ramulu','pune')";
		String qry2="update student set sname='rani' where sno=101";
		String qry3="delete from student where sno=103";

		//add each query to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] result=st.executeBatch();
		
		//for each loop
		int sum=0;
		for(int i:result)
		{
			sum+=i;
		}
		System.out.println("No of records effected in a database table is ="+sum);
		
		st.close();
		con.close();
	}

}

Transaction Management
=====================

sbi table
----------
drop table sbi;
create table sbi(accno number(6),accholder varchar2(10),accbal number(8));
insert into sbi values(111111,'srikanth',20000);
insert into sbi values(222222,'charan',30000);
commit;

kotak table
-----------
drop table kotak;
create table kotak(accno number(6),accholder varchar2(10),accbal number(8));
insert into kotak values(100001,'faiz',40000);
insert into kotak values(200002,'Kiran',70000);
commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the source account no :");
		int sacno=sc.nextInt();
		System.out.println("Enter the destination account no:");
		int dacno=sc.nextInt();
		System.out.println("Enter the amount to transfer :");
		int amt=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		con.setAutoCommit(false);
		
		Statement st=con.createStatement();

		String qry1="update kotak set accbal=accbal-"+amt+" where accno="+sacno;
		String qry2="update sbi set accbal=accbal+"+amt+" where accno="+dacno;
		
		//add each query to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute  the batch
		int[] result=st.executeBatch();
		
		//for each loop
		boolean flag=true;
		for(int i:result)
		{
			if(i==0)
			{
				flag=false;
				break;
			}
		}
		if(flag==true)
		{
			System.out.println("Transaction Done Successfully..");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed!!!");
			con.rollback();
		}
		st.close();
		con.close();
	}
}

MYSQL Database Integration
============================
step1:
------
	Download and Install MY/SQL Database successully.
	ex:
	https://drive.google.com/file/d/1QQjWTJ9v8xz0nfuSGva1_QQwO6KDf9_c/view?usp=sharing

step2:
--------
	Connect with mysql by using password.
	ex:
	username : root( default)
	password: root

step3:
-------
	create a SCHEMA in MYSQL.
	ex:
		create schema IH_JAVA_015;

step4:
-------
	To check list of databases /schemas present in mysql db.
	ex:
		show databases;

step5:
-------
	Use IH_JAVA_015 scheme/database.	
	ex:
		use   IH_JAVA_015;

step6:
---------
	create a student table and insert the records.
	ex:
	create table student(sno int(3),sname varchar(10),sadd varchar(10));
	insert into student values(101,'raja','hyd');
	insert into student values(102,'raju','delhi');
	insert into student values(103,'ravi','pune');
	commit;
step7:
---------
	create a JDBC Application to select student records.

MySQLApp.java
------------------------
package com.ge.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class MySQLApp {

	public static void main(String[] args) {
		
		final String DRIVER="com.mysql.jdbc.Driver";
		final String URL="jdbc:mysql://localhost:3306/IH_JAVA_015";
		final String USERNAME="root";
		final String PASSWORD="root";
		final String QUERY="select * from student";
		
		
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try
		{
			Class.forName(DRIVER);
			con=DriverManager.getConnection(URL,USERNAME,PASSWORD);
			st=con.createStatement();
			rs=st.executeQuery(QUERY);
			while(rs.next())
			{
				System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
			}
			
			rs.close();
			st.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
		

	}

}



	
step8:
--------
	Add "mysql-connector.jar" file in project build path for mysql database.

	right click to project --> built path --> configuration build path --> libraries
	--> add external jars --> select mysql-connector.jar file --> open.


	jar file download : 		
	http://www.java2s.com/Code/Jar/m/Downloadmysqlconnectorjar.htm

	Note:
	ojdbc14.jar  - - for oracle 	
	mysql-connector.jar -->  for mysql 

step9:
--------
	Run the jdbc application.




























































































 























